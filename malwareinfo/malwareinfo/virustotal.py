import os
from os import listdir, path
from os.path import isdir
from random import randint
from enum import Enum

import requests
import logging

from django.conf import settings
from .models import Malware, PendingRequest, ScanRequest, Report, AntivirusReport

logger = logging.getLogger('virustotal')

API_KEY = '0581ee023cb156482b7873653fec2b471f21d15d20357788c86ddcd5e625e08c'

class VirusTotalAPI():
    BASE_URL = 'https://www.virustotal.com/vtapi/v2'
    RATE_LIMIT_ERROR = 204
    MAX_REQ_PER_MINUTE = 4
    SCANS_PER_SECOND = 2

    class REQUEST_TYPE(Enum):
        SCAN = 1
        REPORT = 2

    @staticmethod
    def request_handler(req, params, files=None, headers=None):
        if req == VirusTotalAPI.REQUEST_TYPE.SCAN:
            REQUEST_URL = VirusTotalAPI.BASE_URL + '/file/scan'
            res = requests.post(REQUEST_URL, params=params, files=files)
        elif req == VirusTotalAPI.REQUEST_TYPE.REPORT:
            REQUEST_URL = VirusTotalAPI.BASE_URL + '/file/report'
            res = requests.get(REQUEST_URL, params=params, headers=headers)
        
        if res.status_code == 200:
            return res.json()
        elif res.status_code == VirusTotalAPI.RATE_LIMIT_ERROR:
            logger.warning("Request limit reached")
            return None
        else:
            logger.error("Unknown error %s: %s", res.status_code, res.content)
            return None

    @staticmethod
    def request_scan(): 
        pend_req = PendingRequest.objects.first()
        filename = pend_req.get_filename()  
        m = Malware.objects.filter(sha_256=filename).first()
        if m is None:
            logger.info('Malware {} not present, creating record'.format(filename))
            m = Malware(sha_256=filename)
            m.save()


        params = {'apikey': API_KEY}
        files = {}
        try:
            files = {'file': (
                filename, 
                open(filename, 'rb'))
                }
        except FileNotFoundError:
            logger.error("File %s doesn't exist", filename)
        
        j = VirusTotalAPI.request_handler(
            VirusTotalAPI.REQUEST_TYPE.SCAN,
            params,
            files=files)
        if j is None:
            return

        scan_req = ScanRequest(permalink=j['permalink'],
                        resource=j['resource'],
                        response_code=j['response_code'],
                        scan_id=j['scan_id'],
                        verbose_msg=j['verbose_msg'],
                        malware=m)
        scan_req.save()
        logger.info("Deleting %d pending request, request submitted", pend_req.id)
        pend_req.delete()

    @staticmethod
    def request_report():

        scan_req = ScanRequest.objects.first()
        params = {'apikey': API_KEY, 'resource': scan_req.resource}
        headers = {
            "Accept-Encoding": "gzip, deflate",
            "User-Agent" : "gzip,  MalwareInfo python library for studying purpose"
            }
        j = VirusTotalAPI.request_handler(
            VirusTotalAPI.REQUEST_TYPE.REPORT,
            params=params,
            headers=headers)
        if j is None:
            return

        report = Report(
            response_code=j['response_code'],
            verbose_msg=j['verbose_msg'],
            resource=j['resource'],
            scan_id=j['scan_id'],
            md5=j['md5'],
            scan_date=j['scan_date'],
            positives=j['positives'],
            total=j['total'],
            permalink=j['permalink'],
            malware=Malware.objects.filter(sha_256=scan_req.resource).first()
        )
        report.save()
        for antivirus in j['scans']:
            scan = j['scans'][antivirus]
            ant_report = AntivirusReport(
                antivirus_name=antivirus,
                detected=scan['detected'],
                version=scan['version'],
                result=scan['result'],
                update=scan['update'],
                report=report
            )
            ant_report.save()
        logger.info("Deleting %d scan request, report retrieved", scan_req.id)
        scan_req.delete()        
